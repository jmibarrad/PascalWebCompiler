// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PascalWebCompiler.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReservedWordsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Lexer.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ReservedWords", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ReservedWords")))
            {
                PascalWebCompiler.Tests.Features.ReservedWordsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is Empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void InputIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is Empty", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have an input of \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table1.AddRow(new string[] {
                        "EOF",
                        "$",
                        "0",
                        "0"});
#line 10
 testRunner.Then("the result should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an id equal to haloword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIdEqualToHaloword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an id equal to haloword", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have an input of \'<%haloworld\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table2.AddRow(new string[] {
                        "ID",
                        "haloworld",
                        "2",
                        "0"});
            table2.AddRow(new string[] {
                        "EOF",
                        "$",
                        "11",
                        "0"});
#line 17
 testRunner.Then("the result should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is 2 ids with whitespaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIs2IdsWithWhitespaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is 2 ids with whitespaces", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have an input of \'<%halo warudo\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table3.AddRow(new string[] {
                        "ID",
                        "halo",
                        "2",
                        "0"});
            table3.AddRow(new string[] {
                        "ID",
                        "warudo",
                        "7",
                        "0"});
            table3.AddRow(new string[] {
                        "EOF",
                        "$",
                        "13",
                        "0"});
#line 25
 testRunner.Then("the result should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an int equal to 2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIntEqualTo2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an int equal to 2042", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have an input of \'<%2042\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table4.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "2042",
                        "2",
                        "0"});
            table4.AddRow(new string[] {
                        "EOF",
                        "$",
                        "6",
                        "0"});
#line 34
 testRunner.Then("the result should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an int and an a 2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIntAndAnA2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an int and an a 2042", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have an input of \'<%2042a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table5.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "2042",
                        "2",
                        "0"});
            table5.AddRow(new string[] {
                        "ID",
                        "a",
                        "6",
                        "0"});
            table5.AddRow(new string[] {
                        "EOF",
                        "$",
                        "7",
                        "0"});
#line 42
 testRunner.Then("the result should be", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an id a2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIdA2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an id a2042", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I have an input of \'<%a2042\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table6.AddRow(new string[] {
                        "ID",
                        "a2042",
                        "2",
                        "0"});
            table6.AddRow(new string[] {
                        "EOF",
                        "$",
                        "7",
                        "0"});
#line 51
 testRunner.Then("the result should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Addition operator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnAdditionOperator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Addition operator", ((string[])(null)));
#line 56
 this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have an input of \'<%+\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table7.AddRow(new string[] {
                        "SUM",
                        "+",
                        "2",
                        "0"});
            table7.AddRow(new string[] {
                        "EOF",
                        "$",
                        "3",
                        "0"});
#line 59
 testRunner.Then("the result should be", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a KeyWord")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAKeyWord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a KeyWord", ((string[])(null)));
#line 64
 this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I have an input of \'<%integer num;\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table8.AddRow(new string[] {
                        "ID",
                        "integer",
                        "2",
                        "0"});
            table8.AddRow(new string[] {
                        "ID",
                        "num",
                        "10",
                        "0"});
            table8.AddRow(new string[] {
                        "EOS",
                        ";",
                        "13",
                        "0"});
            table8.AddRow(new string[] {
                        "EOF",
                        "$",
                        "14",
                        "0"});
#line 67
 testRunner.Then("the result should be", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a String Literal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAStringLiteral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a String Literal", ((string[])(null)));
#line 74
 this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("I have an input of \'<%\"integer num\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table9.AddRow(new string[] {
                        "STRING_LITERAL",
                        "\"integer num\"",
                        "2",
                        "0"});
            table9.AddRow(new string[] {
                        "EOF",
                        "$",
                        "15",
                        "0"});
#line 77
 testRunner.Then("the result should be", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a hexadecimal Number")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAHexadecimalNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a hexadecimal Number", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have an input of \'<%$FF09\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table10.AddRow(new string[] {
                        "HEX",
                        "$FF09",
                        "2",
                        "0"});
            table10.AddRow(new string[] {
                        "EOF",
                        "$",
                        "7",
                        "0"});
#line 85
 testRunner.Then("the result should be", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a binary num")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsABinaryNum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a binary num", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
 testRunner.Given("I have an input of \'<%%0101\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table11.AddRow(new string[] {
                        "BIN",
                        "%0101",
                        "2",
                        "0"});
            table11.AddRow(new string[] {
                        "EOF",
                        "$",
                        "7",
                        "0"});
#line 93
 testRunner.Then("the result should be", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a octal num")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAOctalNum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a octal num", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("I have an input of \'<%&07121\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table12.AddRow(new string[] {
                        "OCTAL",
                        "&07121",
                        "2",
                        "0"});
            table12.AddRow(new string[] {
                        "EOF",
                        "$",
                        "8",
                        "0"});
#line 101
 testRunner.Then("the result should be", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a binary assign num")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsABinaryAssignNum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a binary assign num", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("I have an input of \'<%integer bin := %0101;\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table13.AddRow(new string[] {
                        "ID",
                        "integer",
                        "2",
                        "0"});
            table13.AddRow(new string[] {
                        "ID",
                        "bin",
                        "10",
                        "0"});
            table13.AddRow(new string[] {
                        "TK_ASSIGN",
                        ":=",
                        "14",
                        "0"});
            table13.AddRow(new string[] {
                        "BIN",
                        "%0101",
                        "17",
                        "0"});
            table13.AddRow(new string[] {
                        "EOS",
                        ";",
                        "22",
                        "0"});
            table13.AddRow(new string[] {
                        "EOF",
                        "$",
                        "23",
                        "0"});
#line 109
 testRunner.Then("the result should be", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a less equal than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsALessEqualThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a less equal than", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I have an input of \'<%345 <= 365\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table14.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "345",
                        "2",
                        "0"});
            table14.AddRow(new string[] {
                        "LESS_EQUAL",
                        "<=",
                        "6",
                        "0"});
            table14.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "365",
                        "9",
                        "0"});
            table14.AddRow(new string[] {
                        "EOF",
                        "$",
                        "12",
                        "0"});
#line 121
 testRunner.Then("the result should be", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a greater equal than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAGreaterEqualThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a greater equal than", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I have an input of \'<%345 >= 365\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table15.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "345",
                        "2",
                        "0"});
            table15.AddRow(new string[] {
                        "GREATER_EQUAL",
                        ">=",
                        "6",
                        "0"});
            table15.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "365",
                        "9",
                        "0"});
            table15.AddRow(new string[] {
                        "EOF",
                        "$",
                        "12",
                        "0"});
#line 131
 testRunner.Then("the result should be", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is not equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsNotEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is not equal", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 139
 testRunner.Given("I have an input of \'<%345 <> 365\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 140
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table16.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "345",
                        "2",
                        "0"});
            table16.AddRow(new string[] {
                        "NOT_EQUAL",
                        "<>",
                        "6",
                        "0"});
            table16.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "365",
                        "9",
                        "0"});
            table16.AddRow(new string[] {
                        "EOF",
                        "$",
                        "12",
                        "0"});
#line 141
 testRunner.Then("the result should be", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an assigned array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnAssignedArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an assigned array", ((string[])(null)));
#line 148
this.ScenarioSetup(scenarioInfo);
#line 149
 testRunner.Given("I have an input of \'<%myArray := array[1..10] of integer;\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 150
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table17.AddRow(new string[] {
                        "ID",
                        "myarray",
                        "2",
                        "0"});
            table17.AddRow(new string[] {
                        "TK_ASSIGN",
                        ":=",
                        "10",
                        "0"});
            table17.AddRow(new string[] {
                        "KW_ARRAY",
                        "array",
                        "13",
                        "0"});
            table17.AddRow(new string[] {
                        "TK_LEFTBRACKET",
                        "[",
                        "18",
                        "0"});
            table17.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "1",
                        "19",
                        "0"});
            table17.AddRow(new string[] {
                        "TK_RANGE",
                        "..",
                        "20",
                        "0"});
            table17.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "10",
                        "22",
                        "0"});
            table17.AddRow(new string[] {
                        "TK_RIGHTBRACKET",
                        "]",
                        "24",
                        "0"});
            table17.AddRow(new string[] {
                        "KW_OF",
                        "of",
                        "26",
                        "0"});
            table17.AddRow(new string[] {
                        "ID",
                        "integer",
                        "29",
                        "0"});
            table17.AddRow(new string[] {
                        "EOS",
                        ";",
                        "36",
                        "0"});
            table17.AddRow(new string[] {
                        "EOF",
                        "$",
                        "37",
                        "0"});
#line 151
 testRunner.Then("the result should be", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is relational operators")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsRelationalOperators()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is relational operators", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line 167
 testRunner.Given("I have an input of \'<%\"ham\" < \"tam\" and or not \"tam\" > \"ham\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table18.AddRow(new string[] {
                        "STRING_LITERAL",
                        "\"ham\"",
                        "2",
                        "0"});
            table18.AddRow(new string[] {
                        "LESS_THAN",
                        "<",
                        "8",
                        "0"});
            table18.AddRow(new string[] {
                        "STRING_LITERAL",
                        "\"tam\"",
                        "10",
                        "0"});
            table18.AddRow(new string[] {
                        "KW_AND",
                        "and",
                        "16",
                        "0"});
            table18.AddRow(new string[] {
                        "KW_OR",
                        "or",
                        "20",
                        "0"});
            table18.AddRow(new string[] {
                        "KW_NOT",
                        "not",
                        "23",
                        "0"});
            table18.AddRow(new string[] {
                        "STRING_LITERAL",
                        "\"tam\"",
                        "27",
                        "0"});
            table18.AddRow(new string[] {
                        "GREATER_THAN",
                        ">",
                        "33",
                        "0"});
            table18.AddRow(new string[] {
                        "STRING_LITERAL",
                        "\"ham\"",
                        "35",
                        "0"});
            table18.AddRow(new string[] {
                        "EOF",
                        "$",
                        "40",
                        "0"});
#line 169
 testRunner.Then("the result should be", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input access token and range token")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputAccessTokenAndRangeToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input access token and range token", ((string[])(null)));
#line 183
this.ScenarioSetup(scenarioInfo);
#line 184
 testRunner.Given("I have an input of \'<%. ..\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 185
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table19.AddRow(new string[] {
                        "TK_ACCESS",
                        ".",
                        "2",
                        "0"});
            table19.AddRow(new string[] {
                        "TK_RANGE",
                        "..",
                        "4",
                        "0"});
            table19.AddRow(new string[] {
                        "EOF",
                        "$",
                        "6",
                        "0"});
#line 186
 testRunner.Then("the result should be", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input multiline comment with braces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputMultilineCommentWithBraces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input multiline comment with braces", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
 testRunner.Given("I have an input of \'<%{*hey**hey*}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table20.AddRow(new string[] {
                        "EOF",
                        "$",
                        "14",
                        "0"});
#line 195
 testRunner.Then("the result should be", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input multiline comment with parenthesis")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputMultilineCommentWithParenthesis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input multiline comment with parenthesis", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
 testRunner.Given("I have an input of \'<%(*hey**hey*)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table21.AddRow(new string[] {
                        "EOF",
                        "$",
                        "14",
                        "0"});
#line 202
 testRunner.Then("the result should be", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input expression inside parenthesis")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputExpressionInsideParenthesis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input expression inside parenthesis", ((string[])(null)));
#line 206
this.ScenarioSetup(scenarioInfo);
#line 207
 testRunner.Given("I have an input of \'<%(32*20)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 208
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table22.AddRow(new string[] {
                        "TK_LEFTPARENTHESIS",
                        "(",
                        "2",
                        "0"});
            table22.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "32",
                        "3",
                        "0"});
            table22.AddRow(new string[] {
                        "MULT",
                        "*",
                        "5",
                        "0"});
            table22.AddRow(new string[] {
                        "NUMBER_LITERAL",
                        "20",
                        "6",
                        "0"});
            table22.AddRow(new string[] {
                        "TK_RIGHTPARENTHESIS",
                        ")",
                        "8",
                        "0"});
            table22.AddRow(new string[] {
                        "EOF",
                        "$",
                        "9",
                        "0"});
#line 209
 testRunner.Then("the result should be", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input single line comment with doble slash")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputSingleLineCommentWithDobleSlash()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input single line comment with doble slash", ((string[])(null)));
#line 218
this.ScenarioSetup(scenarioInfo);
#line 219
 testRunner.Given("I have an input of \'<%//(*hey**hey*)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table23.AddRow(new string[] {
                        "EOF",
                        "$",
                        "16",
                        "0"});
#line 221
 testRunner.Then("the result should be", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input html pascal html pascal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputHtmlPascalHtmlPascal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input html pascal html pascal", ((string[])(null)));
#line 225
this.ScenarioSetup(scenarioInfo);
#line 226
 testRunner.Given("I have an input of \'<html><%%><html><%%>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 227
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table24.AddRow(new string[] {
                        "HTML",
                        "<html>",
                        "0",
                        "0"});
            table24.AddRow(new string[] {
                        "HTML",
                        "<html>",
                        "10",
                        "0"});
            table24.AddRow(new string[] {
                        "EOF",
                        "$",
                        "20",
                        "0"});
#line 228
 testRunner.Then("the result should be", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
